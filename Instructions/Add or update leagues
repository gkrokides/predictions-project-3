Note: Steps 1 to 7 are for entering a league, season and teams for the first time. Once the data is in the system you just use steps 8 and 9 through the year.

1. Make sure the country associated with the league is already in the CountrySM table. If not, use the management command "python manage.py sm_create_or_update_all_countries". This command will get all the countries from the sportmonks api and will update the CountrySM table accordingly. Alternatively you can use "sm_create_country <smCountryId>" management command to enter just the country you are interested in instead of re-entering all countries in the database. 

2. Use the management command 
"python manage.py sm_create_league <smLeagueId>" 
to enter the related sportmonks league into the LeagueSM table.

3. Use the management command 
"python manage.py sm_create_season <smSeasonId>" 
to enter the related sportmonks season into the SeasonSM table.

4. Use the management command 
"python manage.py sm_create_or_update_teams_for_season <smSeasonId>" 
to enter the related teams into the TeamSM table. Check you have no team names with strange ascii characters. For example change St. PÃ¶lten to St. Polten. You will have to do this from the python shell as the admin does not allow you to see the team details if there is a strange ASCII character.

5. Use the management command 
"python manage.py update_teams_from_teamsm <smSeasonId>" 
to create any missing teams in the Team table (not the TeamSM table).

6. From the admin site, manualy create the league in the Leagues table (not the LeagueSM table) and select the associated League sm foreign key from the dropdown.

7. Similarly, manualy create the season in the Seasons table (not the SeasonSM tabe) and select the associated Season sm foreign key from the dropdown.

8. (Still testing this). Use the management command
python manage.py update_games_boilerplate <smSeasonId> <startDate> <endDate>
to request the match data from the sportmonks API, update or create the FixtureSM and Game instances. 

OR

8. Download the Fixtures from sportmonks and populate the FixtureSM table using the management command 
"python manage.py sm_create_or_update_fixtures_for_daterange_paginated <smLeagueId> <smSeasonId> <startDate> <endDate>".

9. Populate the Game table using the management command 
"python manage.py update_games_from_smfixtures <smSeasonId> <startDate> <endDate>". 

